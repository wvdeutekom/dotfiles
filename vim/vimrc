" Vim configuration file
set cmdheight=2             " lower command line two lines high
set nocompatible            " use vim defaults
set encoding=utf-8          " utf-8 encoding
set fileencoding=utf-8      " save files as utf-8
set bg=dark                 " dark background
syntax on                   " enable syntax highlighting
set clipboard=unnamed

" Vundle
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'
Bundle 'tpope/vim-fugitive'
Bundle 'kien/ctrlp.vim'
Bundle 'Lokaltog/vim-powerline'
Bundle 'sjl/badwolf'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/syntastic'
Bundle 'eraserhd/vim-ios'
Bundle 'Valloric/YouCompleteMe'
Bundle 'rking/ag.vim'
Bundle 'jceb/vim-orgmode'
Bundle 'mhinz/vim-startify'
Bundle 'Shougo/vimproc.vim'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'tell-k/vim-browsereload-mac'
Bundle 'Floobits/floobits-vim'

Bundle 'surround.vim'
Bundle 'VimClojure'
Bundle 'Rainbow-Parenthesis'
Bundle 'jshint.vim'

filetype plugin indent on     " required!

" GUI
if has("gui_running")
  if has('mac')
    set guifont=Ubuntu\ Mono:h17
  else
    set guifont=Envy\ Code\ R\ for\ Powerline:h15
  endif
  set guioptions-=e
  set guioptions-=T
  set guioptions-=m
  set guioptions-=r
  set guioptions-=L
  set guioptions-=b
  set guioptions+=a
  set guioptions+=c
  set novisualbell        " please, no visuals
  set anti                " anti-aliasing
  set mousehide           " hide the mouse when typing 
  colorscheme Tomorrow-Night 
else
  " 256 colors setting
  set t_Co=256
  set mouse=a
  set ttymouse=xterm
  set termencoding=utf-8
  colorscheme Tomorrow-Night 
endif

" Powerline settings
if has("gui_running")
  let g:Powerline_symbols = 'fancy' "pretty symbols for powerline
endif
let g:Powerline_colorscheme='default'
let g:Powerline_theme ='default'

" Editor configuration
if has('unix')
  set shell=/bin/zsh
else
  set shell=/usr/local/bin/zsh
endif
set showmatch               " show matching brackets (), {}' []
set showcmd                 " show command
set modelines=0             " don't use modelines
set ignorecase              " case-insensitive search
set smartcase               " upper-case sensitive search
set laststatus=2            " occasions to show status line, 2=always.
set hidden                  " move buffer to background without saving
set wrap                    " set long-line wrapping
set textwidth=80            " disable automatic text-width
set history=1000            " more history
set shortmess=atI           " shorten confirmation messages
set bs=2                    " fix backspace in FreeBSD
set scrolloff=3             " keep 3 lines below/above cursor
set showmode                " shows the mode i'm currently in
set showcmd                 " shows partial command in the last line
set ttyfast                 " improved remote connections
set ruler                   " show the line and column number of the cursor
set backspace=indent,eol,start
set relativenumber          " show line numbering relative to current position
set number                  " show line numbering
set undofile                " create undofiles
set formatoptions=qrn1
if has("gui_running")
    set colorcolumn=80
endif

autocmd InsertEnter * :set number
autocmd InsertLeave * :set relativenumber

" Ignore these files in netrw
let g:netrw_list_hide= '.*\.swp$,.*\~$,.*\.pyc$'

" Use normal regular expressions
nnoremap / /\v
vnoremap / /\v

" ` is more useful than ' but less accessible.
nnoremap ' `
nnoremap ` '

" Bash-like filename completion
set wildmenu
set wildmode=list:longest
set wildignore=*.o,*.fasl,*.tmp,.git,*.pyc,*.jpg,*.gif,*.png,*.mo

" Look for the file in the current directory, then south until you reach home.
set tags=tags;~/

" Auto-backup files and .swp files don't go to pwd
" Backup settings
set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set backup                        " enable backups
set noswapfile                    " no swapping

" Faster scrolling
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Whitespace
set nowrap
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set listchars=tab:▸\ ,trail:·,eol:¬

let mapleader=','

" Toggle whitespace invisibles
nmap <leader>l :set list!<CR>

" Markdown detection
autocmd BufNewFile,BufReadPost *.mkd,*.markdown,*.md set filetype=markdown

" Fugitive
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>ga :Gadd<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gco :Gcheckout<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gm :Gmove<cr>
nnoremap <leader>gr :Gremove<cr>
nnoremap <leader>gl :Shell git gl -18<cr>:wincmd \|<cr>

" Textile settings
au BufRead *.tex set tw=79

" Mutt settings
au BufRead /tmp/mutt-* set tw=72 formatoptions=tcql

" Rainbow parentheses
map <leader>R :RainbowToggle<cr>

" RestructuredText
augroup rst
  autocmd BufRead *.rst set ai tw=79 spell filetype=rst formatoptions=tcroqn2 comments=n:>
augroup END

" JSON
au! BufRead,BufNewFile *.json setfiletype json 

" CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
nnoremap <leader>cc :CtrlPClearAllCaches<cr>

" Easy motion
let g:EasyMotion_keys = 'asdfghjklqwertyuiopzxcvbnm'

autocmd ColorScheme * highlight EasyMotionTarget ctermfg=32 guifg=#0087df
autocmd ColorScheme * highlight EasyMotionShade ctermfg=237 guifg=#3a3a3a

" AutoReload
let g:returnApp = "MacVim"
command! -bar Cr silent ChromeReload

" Setup statusline with git
set laststatus=2
set statusline=
set statusline+=%-3.3n\ " buffer number
set statusline+=%f\ " file name
set statusline+=%h%m%r%w                        " flags
set statusline+=\[%{strlen(&ft)?&ft:'none'},    " filetype
set statusline+=%{&encoding},                   " encoding
set statusline+=%{&fileformat}]                 " file format
set statusline+=\ %{fugitive#statusline()}      " git branch
set statusline+=%=                              " right align
set statusline+=%-14.(%l,%c%V%)\ %<%P           " offset

" Shortcuts
map <C-i> gqip
map <leader>v :sp $MYVIMRC<cr>
noremap <f1> :bprev!<cr>
noremap <f2> :bnext!<cr>
noremap <f3> :set invfu<cr>
nnoremap j gj
nnoremap k gk
nnoremap <leader>cc :CtrlPClearAllCaches<cr>

" Switching windows
map <C-k> <C-w><Up>
map <C-j> <C-w><Down>
map <C-l> <C-w><Right>
map <C-h> <C-w><Left>

" Switch to alternate file
map <C-Tab> :bnext<cr>
map <C-S-Tab> :bprevious<cr>

" Reload vim config on save
au! BufWritePost $MYVIMRC source %

" Remove .py whitespace
autocmd BufWritePre *.py :%s/\s\+$//e

" Clojure
let vimclojure#FuzzyIndent=1
let vimclojure#HighlightBuiltins=1
let vimclojure#HighlightContrib=1
let vimclojure#DynamicHighlighting=1
let vimclojure#ParenRainbow=1
let vimclojure#WantNailgun = 1 
let vimclojure#NailgunClient = "/usr/local/bin/ng"

" Badwolf theme settings
let g:badwolf_darkgutter = 1

" YouCompleteMe
let g:ycm_min_num_of_chars_for_completion = 3 
let g:ycm_confirm_extra_conf = 1
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_allow_changing_updatetime = 0
